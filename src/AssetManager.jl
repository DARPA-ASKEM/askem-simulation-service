module AssetManager

import DataFrames: DataFrame
import CSV, Downloads, HTTP
import OpenAPI.Clients: Client
import JSON3 as JSON

include("./Settings.jl"); import .Settings: settings

export fetch_dataset, fetch_model, upload

function fetch_model(model_id::Int64)
    response = HTTP.get("$(settings["TDS_URL"])/models/$model_id", ["Content-Type" => "application/json"], payload)
    body = response.body |> JSON.read ∘ String
    body.content
end

function fetch_dataset(dataset_id::Int64)
    url = "$(settings["TDS_URL"])/datasets/$dataset_id/files"
    io = IOBuffer()
    Downloads.download(url, io)
    seekstart(io)
    CSV.read(io, DataFrame)
end

function upload(output::DataFrame)
    # TODO(five): Stream so there isn't duplication
    io = IOBuffer()
    CSV.write(io, output)
    seekstart(io)

                  
    payload = JSON.write(Dict( 
        "name" => "autogenerated sim run",
        "description" => "autogenerated sim run",
        "url" => "",
        "simulation_run" => true
    ))
    response = HTTP.post("$(settings["TDS_URL"])/datasets", ["Content-Type" => "application/json"], payload)
    body = response.body |> JSON.read ∘ String
    

    # TODO(five): Handle 4xx from TDS
    url = "$(settings["TDS_URL"])/datasets/$(body["id"])/files"
    HTTP.post(url, [], HTTP.Form(Dict("filename" => "generated.csv", "file" => HTTP.Multipart("file.csv", io, "text/plain")))) 
    
    body["id"]
end

end # module AssetManager
