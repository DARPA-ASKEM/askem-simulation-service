module AssetManager

import DataFrames: DataFrame
import CSV, Downloads, HTTP
import OpenAPI.Clients: Client
import APIClient: upload_file_datasets_id_file_post, 
                  #get_csv_from_dataset_datasets_id_file_get,
                  create_dataset_datasets_post as init_dataset,
                  Dataset,
                  DatasetsApi

include("./Settings.jl"); import .Settings: settings

api = DatasetsApi(Client(settings["TDS_URL"]))

function get_dataset(dataset_id::Int64)
    url = "$(settings["TDS_URL"])/datasets/$dataset_id/file"
    # TODO(five): Use IOBuffer instead of tempfile
    #io = IOBuffer()
    #Downloads.download(url, io)
    #CSV.File(io, header=1) |> DataFrame
    handle = Downloads.download(url)
    CSV.read(handle, DataFrame)
end

function upload(output::DataFrame)
    # TODO(five): Stream so there isn't duplication
    io = IOBuffer()
    CSV.write(io, output)
    #csv = String(take!(io))

                  
    payload = Dataset(;
        name = "autogenerated sim run",
        description = "autogenerated sim run",
        url = "",
        simulation_run = true
    )
    response, _ = init_dataset(api, payload)

    # TODO(five): Handle 4xx from TDS
    url = "$(settings["TDS_URL"])/datasets/$(response.id)/file"
    headers = ["Authorization" => "Bearer *****"]
    data = ["channel" => "*****", "file" => io]
    body = HTTP.Form(io)
    HTTP.post(url, headers, body) 

    response.id
end

end # module AssetManager
